generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Профиль пользователя
  profile   UserProfile?
  
  // Связи
  accounts  Account[]
  videos    Video[]
  
  @@map("users")
  @@index([email])
  @@index([createdAt])
}

model UserProfile {
  id          String  @id @default(cuid())
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  avatar      String? // S3 URL
  timezone    String  @default("UTC")
  language    String  @default("en")
  
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model Account {
  id            String        @id @default(cuid())
  username      String
  platform      Platform
  status        AccountStatus @default(ACTIVE)
  accessToken   String?       // Зашифрованный
  refreshToken  String?       // Зашифрованный
  postsPerDay   Int           @default(3)
  intervalHours Int           @default(4)
  lastPost      DateTime?
  followers     Int           @default(0)
  following     Int           @default(0)
  engagement    Float         @default(0.0)
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Связи
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
  analytics     AccountAnalytics[]

  @@map("accounts")
  @@unique([userId, platform, username])
  @@index([userId])
  @@index([platform])
  @@index([status])
}

model Video {
  id           String      @id @default(cuid())
  filename     String
  originalName String
  title        String?
  description  String?
  tags         String[]
  fileUrl      String      // S3 URL
  thumbnailUrl String?     // S3 URL
  duration     Int?        // Секунды
  size         Int?        // Байты
  format       String?     // mp4, mov, etc
  resolution   String?     // 1920x1080
  status       VideoStatus @default(UPLOADED)
  aiGenerated  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Связи
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts        Post[]

  @@map("videos")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Post {
  id           String     @id @default(cuid())
  title        String?
  description  String?
  hashtags     String[]
  status       PostStatus @default(SCHEDULED)
  scheduledAt  DateTime
  publishedAt  DateTime?
  externalId   String?    // ID в социальной сети
  errorMessage String?
  retryCount   Int        @default(0)
  engagement   Json?      // Likes, comments, shares
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Связи
  accountId    String
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  videoId      String?
  video        Video?     @relation(fields: [videoId], references: [id], onDelete: SetNull)

  @@map("posts")
  @@index([accountId])
  @@index([status])
  @@index([scheduledAt])
  @@index([publishedAt])
}

model AccountAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  followers   Int
  following   Int
  posts       Int
  likes       Int
  comments    Int
  shares      Int
  reach       Int
  impressions Int
  createdAt   DateTime @default(now())

  // Связи
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_analytics")
  @@unique([accountId, date])
  @@index([accountId])
  @@index([date])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
  @@index([category])
  @@index([key])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE, UPDATE, DELETE
  resource  String   // USER, ACCOUNT, POST
  resourceId String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  PREMIUM
  ENTERPRISE
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
  FACEBOOK
  LINKEDIN
}

enum AccountStatus {
  ACTIVE
  PAUSED
  ERROR
  BANNED
  PENDING
}

enum VideoStatus {
  UPLOADED
  PROCESSING
  READY
  ERROR
  TRANSCODING
}

enum PostStatus {
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
  CANCELLED
} 