generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("USER") // USER, ADMIN, PREMIUM, ENTERPRISE
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Профиль пользователя
  profile   UserProfile?
  
  // Связи
  accounts  Account[]
  videos    Video[]
  
  @@map("users")
}

model UserProfile {
  id          String  @id @default(cuid())
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  avatar      String? // S3 URL
  timezone    String  @default("UTC")
  language    String  @default("en")
  
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model Account {
  id            String   @id @default(cuid())
  username      String
  platform      String   // INSTAGRAM, YOUTUBE, TIKTOK, TWITTER, FACEBOOK, LINKEDIN
  status        String   @default("ACTIVE") // ACTIVE, PAUSED, ERROR, BANNED, PENDING
  accessToken   String?  // Зашифрованный
  refreshToken  String?  // Зашифрованный
  postsPerDay   Int      @default(3)
  intervalHours Int      @default(4)
  lastPost      DateTime?
  followers     Int      @default(0)
  following     Int      @default(0)
  engagement    Float    @default(0.0)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Связи
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
  analytics     AccountAnalytics[]

  @@map("accounts")
  @@unique([userId, platform, username])
}

model Video {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  title        String?
  description  String?
  tags         String?  // JSON string instead of array
  fileUrl      String   // S3 URL
  thumbnailUrl String?  // S3 URL
  duration     Int?     // Секунды
  size         Int?     // Байты
  format       String?  // mp4, mov, etc
  resolution   String?  // 1920x1080
  status       String   @default("UPLOADED") // UPLOADED, PROCESSING, READY, ERROR, TRANSCODING
  aiGenerated  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Связи
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts        Post[]

  @@map("videos")
}

model Post {
  id           String   @id @default(cuid())
  title        String?
  description  String?
  hashtags     String?  // JSON string instead of array
  status       String   @default("SCHEDULED") // SCHEDULED, PUBLISHING, PUBLISHED, FAILED, CANCELLED
  scheduledAt  DateTime
  publishedAt  DateTime?
  externalId   String?  // ID в социальной сети
  errorMessage String?
  retryCount   Int      @default(0)
  engagement   String?  // JSON string for likes, comments, shares
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Связи
  accountId    String
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  videoId      String?
  video        Video?   @relation(fields: [videoId], references: [id], onDelete: SetNull)

  @@map("posts")
}

model AccountAnalytics {
  id          String   @id @default(cuid())
  date        DateTime
  followers   Int
  following   Int
  posts       Int
  likes       Int
  comments    Int
  shares      Int
  reach       Int
  impressions Int
  createdAt   DateTime @default(now())

  // Связи
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_analytics")
  @@unique([accountId, date])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE, UPDATE, DELETE
  resource  String   // USER, ACCOUNT, POST
  resourceId String?
  oldData   String?  // JSON string instead of Json type
  newData   String?  // JSON string instead of Json type
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
} 