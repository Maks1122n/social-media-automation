generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  videos   Video[]

  @@map("users")
}

model Account {
  id              String        @id @default(cuid())
  userId          String
  username        String
  platform        Platform
  password        String        // Encrypted
  adspowerId      String?       // AdsPower profile ID
  proxy           String?
  status          AccountStatus @default(ACTIVE)
  postsPerDay     Int           @default(3)
  intervalHours   Int           @default(4)
  lastPost        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs AutomationJob[]

  @@map("accounts")
}

model Video {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  title       String?
  description String?
  hashtags    String[]
  duration    String?
  size        String?
  url         String?
  thumbnailUrl String?
  aiGenerated Boolean  @default(false)
  status      VideoStatus @default(READY)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs AutomationJob[]

  @@map("videos")
}

model AutomationJob {
  id           String    @id @default(cuid())
  accountId    String
  videoId      String
  scheduledTime DateTime
  status       JobStatus @default(PENDING)
  attempts     Int       @default(0)
  lastError    String?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("automation_jobs")
}

enum Role {
  USER
  ADMIN
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
}

enum AccountStatus {
  ACTIVE
  PAUSED
  BLOCKED
  ERROR
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  READY
  FAILED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
} 